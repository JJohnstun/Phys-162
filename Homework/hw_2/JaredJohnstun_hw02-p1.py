import matplotlib.pyplot as plt
import numpy as np

print("Python script has started.")
print("Creating a simple plot...")
plt.figure()

"""
#first plot with added values and other changes
line_1 = plt.plot([1, 2, 3, 4, 5, 6, 7],	# list of x-values to plot
	[1, 4, 2, 5, 8, 3, 5],  		# list of y-values to plot
	color="purple",        	#  Line color
	linestyle="-",     	#  Line style
	marker="o",         	#  Symbol used at data point
	markeredgecolor="blue",  # Symbol color
    label ="Purple Line"
	)

#second added plot
line_2 = plt.plot( [1, 2, 3, 4, 5, 6, 7], #list of the x-values
    [4, 7, 12, 14, 16, 19, 3], #list of the y - values
    color = "orange", #Line color
	linestyle = "--", #line style
    marker = "+", #symbol used at data point
    markeredgecolor = "red", #Symbol color
    label = "Orange Line"
	)
"""

#third plot with sine curve
x3 = np.linspace(0, 6*np.pi, 200 )
y3 = np.sin(x3)
sine_curve = plt.plot(
    x3, #range of x- values
    y3, #range of y- values
    color = "black", #line color
    linestyle = "-", #line style
    markeredgecolor = "black", #symbol color
	label = "Sine Curve"
)

#fourth plot with cosine curve
x4 = np.linspace(0, 6*np.pi, 200 )
y4 = np.cos(x4)
cos_curve = plt.plot(
    x4, #range of x- values
    y4, #range of y- values
    color = "Blue", #line color
    linestyle = "-", #line style
    markeredgecolor = "black", #symbol color
	label = "Cosine Curve"
)


#function made to generate points for provided curve
def f(x):
    #generate eqation using x- value parameter.
    y = (1/np.sqrt(2))*(np.sin(x5) + np.cos(x5))
    return y


#range of x - values for the plot below
x5 = np.linspace(0, 6*np.pi, 200 )

#Create the 5th plot

f = plt.plot(
    x5, #range of x - values
    f(x5), #range of y - values generated by function
    color = "red", #curve color
    linestyle = "dashdot",	 #line style
    markeredgecolor = "red", #symbol color
    label = "f(x) = 1/âˆš2(sin(x) + cos(x))"
)



plt.xlabel('The X Axis')
plt.ylabel('The Y Axis')
plt.title('This is the plot title')
plt.legend(bbox_to_anchor=(1, 1), bbox_transform=plt.gcf().transFigure)
print("Showing plot window.")	
print("Nothing else will happen until you close the plot window!")
plt.savefig("JaredJohnstun_hw02-p2_image.pdf")
plt.show()
print("Python script is done.")